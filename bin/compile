#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse params
BUILD_DIR=$1
CACHE_DIR=$2

echo "-----> We are in '$PWD' with contents:"
ls -a
echo "-----> Present PATH's:"
echo "PATH: '$PATH'"
echo "LD_RUN_PATH: '$LD_RUN_PATH'"
echo "LD_LIBRARY_PATH: '$LD_LIBRARY_PATH'"
echo "PKG_CONFIG_PATH: '$PKG_CONFIG_PATH'"
export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
export LD_RUN_PATH="/usr/local/lib:/usr/lib:/lib:$LD_RUN_PATH"
export LD_LIBRARY_PATH="$LD_RUN_PATH"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/lib/pkgconfig:$PKG_CONFIG_PATH"
echo "Updating PATH: '$PATH'"
echo "Updating LD_RUN_PATH: '$LD_RUN_PATH'"
echo "Updating LD_LIBRARY_PATH: '$LD_LIBRARY_PATH'"
echo "Updating PKG_CONFIG_PATH: '$PKG_CONFIG_PATH'"

# fetch and cache the vulcan build
OPENCV_PACKAGE="http://s3.amazonaws.com/tznode/vulcan-compiled-opencv.tgz"
OPENCV_PACKAGE_ETAG=$(curl -s --head "$OPENCV_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
VENDORED_OPENCV="/app/vendor/opencv"
OPENCV_CACHE="$CACHE_DIR/opencv_$OPENCV_PACKAGE_ETAG";

if [ -d "$OPENCV_CACHE" ]; then
  echo "-----> Reusing cached OpenCV ($OPENCV_PACKAGE_ETAG)"
  cp -a $OPENCV_CACHE $VENDORED_OPENCV
else
  echo "-----> Fetching and caching OpenCV ($OPENCV_PACKAGE_ETAG)"
  mkdir -p $VENDORED_OPENCV
  curl $OPENCV_PACKAGE -s -o - | tar xzf - -C $VENDORED_OPENCV
  mkdir -p $CACHE_DIR
  cp -a $VENDORED_OPENCV $OPENCV_CACHE
fi

# vendor
echo "-----> Vendoring OpenCV shared objects into slug"
VENDORED_SO="$BUILD_DIR/vendor/opencv/lib"
mkdir -p $VENDORED_SO
cp -a "$VENDORED_OPENCV/lib/." $VENDORED_SO

# runtime
echo "export LD_RUN_PATH=\"\$HOME/vendor/opencv/lib:\$LD_RUN_PATH\"" > $BUILD_DIR/.profile.d/opencv.sh
echo "export LD_LIBRARY_PATH=\"\$HOME/vendor/opencv/lib:\$LD_LIBRARY_PATH\"" > $BUILD_DIR/.profile.d/opencv.sh
echo "export PKG_CONFIG_PATH=\"\$HOME/vendor/opencv/lib/pkgconfig:\$PKG_CONFIG_PATH\"" >> $BUILD_DIR/.profile.d/opencv.sh
